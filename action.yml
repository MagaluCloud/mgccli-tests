name: 'MGCCLI Tests'
description: 'Executa testes para mgccli usando Poetry e Pytest'
author: 'MagaluCloud'

inputs:
  python-version:
    description: 'Versão do Python a ser utilizada'
    required: false
    default: '3.12'
  pytest-args:
    description: 'Argumentos adicionais para passar ao pytest'
    required: false
    default: ''

outputs:
  test-output:
    description: 'Output completo dos testes executados'
    value: ${{ steps.run-tests.outputs.output }}
  test-exit-code:
    description: 'Código de saída dos testes (0 = sucesso, outros = falha)'
    value: ${{ steps.run-tests.outputs.exit-code }}

runs:
  using: 'composite'
  steps:
    - name: Validate environment
      shell: bash
      run: |
        if [ -z "$MGC_API_KEY" ]; then
          echo "❌ MGC_API_KEY não está definida"
          exit 1
        fi
        if [ -z "$MGC_PATH" ]; then
          echo "❌ MGC_PATH não está definida"
          exit 1
        fi
        echo "✅ Variáveis de ambiente validadas"
        
    - name: Resolve MGC_PATH
      shell: bash
      run: |
        # Se MGC_PATH é relativo, converte para absoluto baseado no workspace
        if [[ "$MGC_PATH" != /* ]]; then
          export MGC_PATH="${{ github.workspace }}/${MGC_PATH}"
        fi
        echo "MGC_PATH_RESOLVED=$MGC_PATH" >> $GITHUB_ENV
        echo "MGC_PATH resolvido para: $MGC_PATH"
        
    - name: Verify MGC binary
      shell: bash
      run: |
        if [ ! -f "$MGC_PATH_RESOLVED" ]; then
          echo "❌ Binário MGC não encontrado em: $MGC_PATH_RESOLVED"
          echo "Listando arquivos no diretório:"
          ls -la "$(dirname "$MGC_PATH_RESOLVED")" || echo "Diretório não existe"
          exit 1
        fi
        echo "✅ Binário MGC encontrado: $MGC_PATH_RESOLVED"
        
    - name: Checkout mgccli source
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        repository: MagaluCloud/mgccli-tests
        path: ./tmp/mgccli-source
        
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
      with:
        python-version: ${{ inputs.python-version }}
        
    - name: Install Poetry
      uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a
      with:
        version: 1.8.4
        
    - name: Install dependencies
      shell: bash
      working-directory: ./tmp/mgccli-source
      run: |
        poetry install --no-interaction
        
    - name: Run tests
      id: run-tests
      shell: bash
      working-directory: ./tmp/mgccli-source
      env:
        MGC_PATH: ${{ env.MGC_PATH_RESOLVED }}
      run: |
        echo "Executando testes com MGC_PATH: $MGC_PATH"
        poetry run pytest ${{ inputs.pytest-args }} --tb=short --ignore=tests/test_auth.py 2>&1 | tee test_output.txt
        
        # Captura o código de saída dos testes
        exit_code=${PIPESTATUS[0]}
        echo "exit-code=$exit_code" >> $GITHUB_OUTPUT
        
        # Captura o conteúdo completo do arquivo de output
        if [ -f "test_output.txt" ]; then
          output_content=$(cat test_output.txt)
          # Escapa o conteúdo para evitar problemas com caracteres especiais
          output_content=$(echo "$output_content" | sed 's/%/%25/g')
          output_content=$(echo "$output_content" | sed 's/\r/%0D/g')
          output_content=$(echo "$output_content" | sed 's/\n/%0A/g')
          echo "output=$output_content" >> $GITHUB_OUTPUT
        else
          echo "output=Arquivo test_output.txt não encontrado" >> $GITHUB_OUTPUT
        fi
        